<?php

/**
 * @file
 * Contains pathauto_edit_links.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_operation_alter().
 */
function pathauto_edit_links_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Skip webform entities to prevent conflicts
  if ($entity->getEntityTypeId() === 'webform' || $entity->getEntityTypeId() === 'webform_submission') {
    return;
  }
  
  // Only alter operations for nodes that have path aliases.
  if ($entity instanceof NodeInterface && isset($operations['edit'])) {
    // Skip webform nodes
    if ($entity->hasField('webform') || $entity->bundle() === 'webform') {
      return;
    }
    
    $alias_manager = \Drupal::service('path_alias.manager');
    $path = '/node/' . $entity->id();
    $alias = $alias_manager->getAliasByPath($path);
    
    // If there's an alias different from the system path, modify the edit URL.
    if ($alias !== $path && !empty($alias) && $alias !== '/') {
      $operations['edit']['url'] = Url::fromUserInput($alias . '/edit');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for links.
 * 
 * Temporarily disabled to prevent conflicts with webform module.
 */
function pathauto_edit_links_preprocess_links(&$variables) {
  // Disabled to prevent webform module conflicts
  return;
}

/**
 * Implements hook_node_links_alter().
 * 
 * Temporarily disabled to prevent conflicts with webform module.
 */
function pathauto_edit_links_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  // Disabled to prevent webform module conflicts
  return;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function pathauto_edit_links_menu_local_tasks_alter(&$data, $route_name) {
  // Skip webform-related routes to prevent conflicts
  if (strpos($route_name, 'webform') !== false) {
    return;
  }
  
  // Only alter local tasks on node canonical pages
  if ($route_name === 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    
    if ($node && $node instanceof NodeInterface) {
      // Skip webform nodes
      if ($node->hasField('webform') || $node->bundle() === 'webform') {
        return;
      }
      
      $alias_manager = \Drupal::service('path_alias.manager');
      $path = '/node/' . $node->id();
      $alias = $alias_manager->getAliasByPath($path);
      
      // If there's a valid alias, modify the task URLs
      if ($alias !== $path && !empty($alias) && $alias !== '/') {
        // Check if edit task exists and modify it
        if (isset($data['tabs'][0]['entity.node.edit_form']['#link']['url'])) {
          $data['tabs'][0]['entity.node.edit_form']['#link']['url'] = Url::fromUserInput($alias . '/edit');
        }
        
        // Also handle delete and other tasks
        if (isset($data['tabs'][0]['entity.node.delete_form']['#link']['url'])) {
          $data['tabs'][0]['entity.node.delete_form']['#link']['url'] = Url::fromUserInput($alias . '/delete');
        }
        
        // Handle revisions tab
        if (isset($data['tabs'][0]['entity.node.version_history']['#link']['url'])) {
          $data['tabs'][0]['entity.node.version_history']['#link']['url'] = Url::fromUserInput($alias . '/revisions');
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu_local_task.
 */
function pathauto_edit_links_preprocess_menu_local_task(&$variables) {
  // Skip if this is a webform-related route to prevent conflicts
  $current_route = \Drupal::routeMatch()->getRouteName();
  if ($current_route && strpos($current_route, 'webform') !== false) {
    return;
  }
  
  // Get the current node from the route
  $node = \Drupal::routeMatch()->getParameter('node');
  
  if ($node && $node instanceof NodeInterface) {
    // Skip webform nodes
    if ($node->hasField('webform') || $node->bundle() === 'webform') {
      return;
    }
    
    $alias_manager = \Drupal::service('path_alias.manager');
    $path = '/node/' . $node->id();
    $alias = $alias_manager->getAliasByPath($path);
    
    // If there's a valid alias, modify the task URL
    if ($alias !== $path && !empty($alias) && $alias !== '/') {
      // Check if the link exists and is a URL object
      if (isset($variables['link']['#url']) && $variables['link']['#url'] instanceof \Drupal\Core\Url) {
        try {
          $route_name = $variables['link']['#url']->getRouteName();
          
          // Skip webform-related routes
          if ($route_name && strpos($route_name, 'webform') !== false) {
            return;
          }
          
          $route_params = $variables['link']['#url']->getRouteParameters();
          
          // Only modify if this is for the same node
          if (isset($route_params['node']) && $route_params['node'] == $node->id()) {
            // Create new URLs for the tabs
            switch ($route_name) {
              case 'entity.node.edit_form':
                $variables['link']['#url'] = Url::fromUserInput($alias . '/edit');
                break;
              case 'entity.node.delete_form':
                $variables['link']['#url'] = Url::fromUserInput($alias . '/delete');
                break;
              case 'entity.node.version_history':
                $variables['link']['#url'] = Url::fromUserInput($alias . '/revisions');
                break;
            }
          }
        } catch (\Exception $e) {
          // If there's an error, skip the modification to prevent site breakage
        }
      }
    }
  }
}
